import logging
import sqlite3 as sq
from src.database import database

from src.keyboards import admin_keyboards
from src import req, config, banwords

from aiogram import Router, F, Bot
from aiogram.filters import Command
from aiogram.types import CallbackQuery, Message, ChatPermissions
from aiogram.fsm.context import FSMContext

rt = Router()
bot = Bot(token=config.BOT_TOKEN)
db = sq.connect(config.database_path)
cur = db.cursor()

admin = database.get_admin()


@rt.message(Command("start"))
async def admin_panel(message: Message, state: FSMContext):
    if message.chat.type == 'private':
        user_id = message.from_user.id
        if str(user_id) in str(admin):
            await message.answer("‚úÖ | –í—ã –≤–æ—à–ª–∏ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", reply_markup=await admin_keyboards.admin_keyboard())
            await state.set_state(state=None)
        else:
            await message.answer('–ù–µ—Ç –ø—Ä–∞–≤ ‚ùå')
    else:
        pass


@rt.callback_query(F.data == 'back')
async def admin_panel(call: CallbackQuery, state: FSMContext):
    user_id = call.message.chat.id
    if str(user_id) not in str(admin):
        await call.message.answer('–ù–µ—Ç –ø—Ä–∞–≤ ‚ùå')
    else:
        await call.message.edit_text("‚úÖ | –í—ã –≤–æ—à–ª–∏ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", reply_markup=await admin_keyboards.admin_keyboard())
        await state.set_state(state=None)


@rt.callback_query(F.data == 'admins')
async def admin_panel(call: CallbackQuery, state: FSMContext):
    user_id = call.message.chat.id
    if str(user_id) not in str(admin):
        await call.message.answer('–ù–µ—Ç –ø—Ä–∞–≤ ‚ùå')
    else:
        await call.message.edit_text("‚úÖ | –í—ã –≤–æ—à–ª–∏ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", reply_markup=await admin_keyboards.admins())
        await state.set_state(state=None)


@rt.callback_query(F.data == 'headman')
async def admin_panel(call: CallbackQuery, state: FSMContext):
    user_id = call.message.chat.id
    if str(user_id) not in str(admin):
        await call.message.answer('–ù–µ—Ç –ø—Ä–∞–≤ ‚ùå')
    else:
        await call.message.edit_text("‚úÖ | –í—ã –≤–æ—à–ª–∏ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", reply_markup=await admin_keyboards.headman())
        await state.set_state(state=None)


@rt.callback_query(F.data == 'add_admin')
async def admin_pass(call: CallbackQuery, state: FSMContext):
    user_id = call.message.chat.id
    if str(user_id) not in str(admin):
        await call.message.answer('–ù–µ—Ç –ø—Ä–∞–≤ ‚ùå')
    else:
        await state.set_state(req.admin_add.password)
        await call.message.edit_text("üöß | –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å", reply_markup=await admin_keyboards.back())


@rt.message(req.admin_add.password)
async def admin_id(message: Message, state: FSMContext):
    await state.update_data(password=message.text)
    await state.set_state(req.admin_add.us)
    await message.delete()
    await message.answer("üöß | –í–≤–µ–¥–∏—Ç–µ id –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=await admin_keyboards.back())


@rt.message(req.admin_add.us)
async def admin_addd(message: Message, state: FSMContext, bot: Bot):
    await state.update_data(us=message.text)
    p = await state.get_data()
    if p['password'] == config.password:
        with sq.connect(config.database_path):
            cur.execute("INSERT INTO admin (tg) VALUES (?)", (p['us'],))
            db.commit()
        await message.answer("‚úÖ | –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω", reply_markup=await admin_keyboards.admin_keyboard())
        await bot.promote_chat_member(chat_id=config.chat, user_id=p['us'], can_delete_messages=True)
        await bot.set_chat_administrator_custom_title(chat_id=config.chat, user_id=p['us'], custom_title='–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä')
        await bot.send_message(p['us'], 'üòé | –î–æ—Å—Ç—É–ø–Ω—ã –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞')
        await state.set_state(state=None)
    else:
        await message.answer("‚ùå | –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å", reply_markup=await admin_keyboards.admin_keyboard())
        await state.set_state(state=None)


@rt.callback_query(F.data == 'del_admin')
async def admin_pass(call: CallbackQuery, state: FSMContext):
    user_id = call.message.chat.id
    if str(user_id) not in str(admin):
        await call.message.answer('–ù–µ—Ç –ø—Ä–∞–≤ ‚ùå')
    else:
        await state.set_state(req.admin_del.password)
        await call.message.edit_text("üöß | –ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å", reply_markup=await admin_keyboards.back())


@rt.message(req.admin_del.password)
async def admin_id(message: Message, state: FSMContext):
    await state.update_data(password=message.text)
    await state.set_state(req.admin_del.us)
    await message.delete()
    await message.answer("üöß | –í–≤–µ–¥–∏—Ç–µ id –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=await admin_keyboards.back())


@rt.message(req.admin_del.us)
async def admin_dell(message: Message, state: FSMContext):
    await state.update_data(us=message.text)
    p = await state.get_data()
    if p['password'] == config.password:
        with sq.connect(config.database_path):
            cur.execute("DELETE FROM admin WHERE tg = ?", (p['us'],))
            db.commit()
        await message.answer("‚úÖ | –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–¥–∞–ª–µ–Ω", reply_markup=await admin_keyboards.admin_keyboard())
        await bot.send_message(p['us'], '‚ùå | –í–∞–º –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞')
        await bot.set_chat_administrator_custom_title(chat_id=config.chat, user_id=p['us'], custom_title='')
        await bot.promote_chat_member(chat_id=config.chat, user_id=p['us'], can_delete_messages=False)
    else:
        await message.answer("‚ùå | –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å", reply_markup=await admin_keyboards.admin_keyboard())
    await state.set_state(state=None)


@rt.callback_query(F.data == 'add_headman')
async def support_id(call: CallbackQuery, state: FSMContext):
    user_id = call.message.chat.id
    if str(user_id) not in str(admin):
        await call.message.answer('–ù–µ—Ç –ø—Ä–∞–≤ ‚ùå')
    else:
        await state.set_state(req.headman_add.us)
        await call.message.edit_text("üöß | –í–≤–µ–¥–∏—Ç–µ id —Å—Ç–∞—Ä–æ—Å—Ç—ã", reply_markup=await admin_keyboards.back())


@rt.message(req.headman_add.us)
async def support_addd(message: Message, state: FSMContext):
    await state.update_data(us=message.text)
    p = await state.get_data()
    await message.answer("‚úÖ | –°—Ç–∞—Ä–æ—Å—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞", reply_markup=await admin_keyboards.admin_keyboard())
    await bot.promote_chat_member(chat_id=config.chat, user_id=p['us'], can_delete_messages=True)
    await bot.set_chat_administrator_custom_title(chat_id=config.chat, user_id=p['us'], custom_title='–°—Ç–∞—Ä–æ—Å—Ç–∞')
    await state.set_state(state=None)


@rt.callback_query(F.data == 'del_headman')
async def support_id(call: CallbackQuery, state: FSMContext):
    user_id = call.message.chat.id
    if str(user_id) not in str(admin):
        await call.message.answer('–ù–µ—Ç –ø—Ä–∞–≤ ‚ùå')
    else:
        await state.set_state(req.headman_del.us)
        await call.message.edit_text("üöß | –í–≤–µ–¥–∏—Ç–µ id —Å—Ç–∞—Ä–æ—Å—Ç—ã", reply_markup=await admin_keyboards.back())


@rt.message(req.headman_del.us)
async def support_dell(message: Message, state: FSMContext):
    await state.update_data(us=message.text)
    p = await state.get_data()
    await message.answer("‚úÖ | –°—Ç–∞—Ä–æ—Å—Ç–∞ —É–¥–∞–ª–µ–Ω–∞", reply_markup=await admin_keyboards.admin_keyboard())
    await bot.set_chat_administrator_custom_title(chat_id=config.chat, user_id=p['us'], custom_title='')
    await bot.promote_chat_member(chat_id=config.chat, user_id=p['us'], can_delete_messages=False)
    await state.set_state(state=None)


@rt.callback_query(F.data == 'chat')
async def admin_panel(call: CallbackQuery):
    user_id = call.message.chat.id
    if str(user_id) not in str(admin):
        await call.message.answer('–ù–µ—Ç –ø—Ä–∞–≤ ‚ùå')
    else:
        await call.message.edit_text("‚úÖ | –í—ã –≤–æ—à–ª–∏ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", reply_markup=await admin_keyboards.chat_settings())


@rt.callback_query(F.data == 'chat_on')
async def admin_panel(call: CallbackQuery):
    user_id = call.message.chat.id
    if str(user_id) not in str(admin):
        await call.message.answer('–ù–µ—Ç –ø—Ä–∞–≤ ‚ùå')
    else:
        permissions = {
            'can_send_messages': True,
            'can_send_media_messages': True,
            'can_send_polls': True,
            'can_send_other_messages': True
        }
        new_permissions = ChatPermissions(**permissions)
        await bot.set_chat_permissions(chat_id=config.chat, permissions=new_permissions)
        await call.message.edit_text("‚úÖ | –ß–∞—Ç –≤–∫–ª—é—á–µ–Ω", reply_markup=await admin_keyboards.chat_off())


@rt.callback_query(F.data == 'chat_off')
async def admin_panel(call: CallbackQuery):
    user_id = call.message.chat.id
    if str(user_id) not in str(admin):
        await call.message.answer('–ù–µ—Ç –ø—Ä–∞–≤ ‚ùå')
    else:
        permissions = {
            'can_send_messages': False,
            'can_send_media_messages': False,
            'can_send_polls': False,
            'can_send_other_messages': False
        }
        new_permissions = ChatPermissions(**permissions)
        await bot.set_chat_permissions(chat_id=config.chat, permissions=new_permissions)
        await call.message.edit_text("‚úÖ | –ß–∞—Ç –æ—Ç–∫–ª—é—á–µ–Ω", reply_markup=await admin_keyboards.chat_on())


@rt.callback_query(F.data == 'info')
async def admin_panel(call: CallbackQuery):
    user_id = call.message.chat.id
    if str(user_id) not in str(admin):
        await call.message.answer('–ù–µ—Ç –ø—Ä–∞–≤ ‚ùå')
    else:
        await call.message.edit_text("", reply_markup=await admin_keyboards.back())


@rt.message()
async def banword_filter(message: Message):
    if message.chat.type == 'private':
        return

    if not message.text:
        return

    message_text = message.text.lower()
    is_banword = any(banword in message_text for banword in banwords.ban_list)

    username = message.from_user.username or message.from_user.full_name

    if is_banword:
        try:
            await message.delete()
            logging.info(f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} | {username}")
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

        ban_count = await database.add_or_update_user(message.from_user.id, username)
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} ({message.from_user.id}) —É–ø–æ—Ç—Ä–µ–±–∏–ª –º–∞—Ç {ban_count} —Ä–∞–∑")


@rt.callback_query(F.data == 'banwords')
async def show_banwords(call: CallbackQuery):
    user_id = call.message.chat.id
    if str(user_id) not in str(admin):
        await call.message.answer('–ù–µ—Ç –ø—Ä–∞–≤ ‚ùå')
    else:
        banned_users = await database.get_all_banned_users()

        if not banned_users:
            await call.message.edit_text("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–≤—à–∏—Ö –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞. üò•", reply_markup=await admin_keyboards.back())
            return

        response = "üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–≤—à–∏—Ö –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞:\n\n"
        for user in banned_users:
            user_id, username, ban_count = user
            response += f"üë§ <a href='tg://user?id={user_id}'>{username}</a> ‚Äî {ban_count}\n"

        await call.message.reply(response, parse_mode="HTML", reply_markup=await admin_keyboards.back())


# @rt.callback_query(F.data == 'msg_from_bot')
# async def message_from_bot(call: CallbackQuery, state: FSMContext):
#     user_id = call.message.chat.id
#     if str(user_id) not in str(admin):
#         await call.message.answer('–ù–µ—Ç –ø—Ä–∞–≤ ‚ùå')
#     else:
#         await state.set_state(req.message123.zv)
#         await call.message.edit_text("–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç –ª–∏—Ü–∞ –±–æ—Ç–∞ (–±–µ–∑ –∫–∞—Ä—Ç–∏–Ω–æ–∫ü•∫)", reply_markup=await admin_keyboards.back())
#
#
# @rt.message(req.message123.zv)
# async def message_from_bot_send(message: Message, state: FSMContext):
#     await state.update_data(zv=message.text)
#     p = await state.get_data()
#     text = p['zv']
#     await bot.send_message(chat_id=config.chat, text=text)
#     await message.answer('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ‚úÖ', reply_markup=await admin_keyboards.back())
#     await state.set_state(state=None)
